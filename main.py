# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gb_dL7LVfv62Ozd_gWQBppREJWHwOQWU
"""

!pip install streamlit

import streamlit as st
import tensorflow as tf
import numpy as np

def model_prediction (test_image) :
    # Indent the lines within the function body by 4 spaces
    model = tf.keras.models.load_model("trained_ plant_disease_model.keras")
    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(128, 128)) # Fix target_size here to (128,128)
    input_arr = tf.keras.preprocessing.image.img_to_array(image) # fix typo here from ing_to_array to img_to_array
    input_arr = np.array([input_arr])  # convert single image to batch
    predictions = model.predict(input_arr)  # Fix predict call
    return np.argmax(predictions)  # return index of max element

#Sidebar
st.sidebar. title ("Plant Disease Detection System for Sustainable Agriculture")
app_mode = st. sidebar.selectbox ("Select Page", ["HOME", "DISEASE RECOGNITION" ] )
#app_mode = st. sidebar.selectbox("Select Page", ["Home"," ", "Disease Recognition"

# import Image from pillow to open images
from PIL import Image
import os

# Get the current working directory instead of relying on __file__
script_dir = os.getcwd()

# Construct the full path to the image file
image_path = os.path.join(script_dir, "Diseases.png")

# Open the image using the full path
ing = Image.open(image_path) # Assuming 'ing' is intended to be 'img'

# import Image from pillow to open images
from PIL import Image
import os

# Get the current working directory instead of relying on __file__
script_dir = os.getcwd()

# Construct the full path to the image file
image_path = os.path.join(script_dir, "Diseases.png")

# Open the image using the full path
#Fixed: Changed 'ing' to 'img'
img = Image.open(image_path) # Assuming 'ing' is intended to be 'img'

# display image using streamlit
# width is used to set the width of an image
st.image(img)

#Main Page
if (app_mode=="HOME" ) :
    st.markdown ("<hl style='text-align: center; '>Plant Disease Detection System") # Indented this line by 4 spaces

#Prediction Page
elif (app _mode="DISEASE RECOGNITION"):
st.header ("Plant Disease Detection System for Sustainable Agriculture")
test_image = st. file_uploader ("Choose an Image:")
if (st. button ("Show Image")) :
st.image (test_image,width=4, use_column_width=True)

#Predict button
if (st.button ("Predict")):
    st. snow ()
    st.write("Our Prediction")
    result_index = model_prediction (test_image)

    #Reading Labels
    # Fix: Changed 'class name' to 'class_name'
    class_name = ['Apple_Apple_scab', 'Apple_Black_rot', 'Apple_Cedar_apple_rust',
                  'Blueberry_healthy', 'Cherry_(including_sour)_Powdery_mildew',
                  'Cherry_(including_sour)_healthy', 'Corn_(maize)_Cercospora_leaf_spot Gray_leaf_spot',
                  'Corn_(maize)_Common_rust_', 'Corn_(maize)_Northern_Leaf_Blight',
                  'Grape_Black_rot', 'Grape_Esca_(Black_Measles)', 'Grape_Leaf_blight_(Isariopsis_Leaf_Spot)',
                  'Grape_healthy', 'Orange_Haunglongbing_(Citrus_greening)',
                  'Peach_healthy', 'Pepper,_bell_Bacterial_spot', 'Pepper,_bell_healthy',
                  'Potato_Early_blight', 'Potato_Late_blight', 'Potato_healthy',
                  'Raspberry_healthy', 'Soybean_healthy', 'Squash_Powdery_mildew',
                  'Strawberry_Leaf_scorch', 'Strawberry_healthy', 'Tomato_Bacterial_spot',
                  'Tomato_Early_blight', 'Tomato_Late_blight', 'Tomato_Leaf_Mold',
                  'Tomato_Septoria_leaf_spot', 'Tomato_Spider_mites Two-spotted_spider_mite',
                  'Tomato_Target_Spot', 'Tomato_Tomato_Yellow_Leaf_Curl_Virus',
                  'Tomato_Tomato_mosaic_virus', 'Tomato_healthy']

#Predict button
if (st.button ("Predict")):
    st. snow ()
    st.write("Our Prediction")
    result_index = model_prediction (test_image)

    #Reading Labels
    # Fix: Changed 'class name' to 'class_name'
    class_name = ['Apple_Apple_scab', 'Apple_Black_rot', 'Apple_Cedar_apple_rust',
                  'Blueberry_healthy', 'Cherry_(including_sour)_Powdery_mildew',
                  'Cherry_(including_sour)_healthy', 'Corn_(maize)_Cercospora_leaf_spot Gray_leaf_spot',
                  'Corn_(maize)_Common_rust_', 'Corn_(maize)_Northern_Leaf_Blight',
                  'Grape_Black_rot', 'Grape_Esca_(Black_Measles)', 'Grape_Leaf_blight_(Isariopsis_Leaf_Spot)',
                  'Grape_healthy', 'Orange_Haunglongbing_(Citrus_greening)',
                  'Peach_healthy', 'Pepper,_bell_Bacterial_spot', 'Pepper,_bell_healthy',
                  'Potato_Early_blight', 'Potato_Late_blight', 'Potato_healthy',
                  'Raspberry_healthy', 'Soybean_healthy', 'Squash_Powdery_mildew',
                  'Strawberry_Leaf_scorch', 'Strawberry_healthy', 'Tomato_Bacterial_spot',
                  'Tomato_Early_blight', 'Tomato_Late_blight', 'Tomato_Leaf_Mold',
                  'Tomato_Septoria_leaf_spot', 'Tomato_Spider_mites Two-spotted_spider_mite',
                  'Tomato_Target_Spot', 'Tomato_Tomato_Yellow_Leaf_Curl_Virus',
                  'Tomato_Tomato_mosaic_virus', 'Tomato_healthy']

    # Moved the st.success call inside the if block
    # st,success("Model is Predicting it's a l}". format (class_name [result_index]))
    st.success("Model is Predicting it's a {}".format(class_name[result_index])) # Use st.success, fix typo in class_name, and formatting..